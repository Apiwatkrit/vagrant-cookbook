# -*- mode: ruby -*-
# vi: set ft=ruby :

# Path to extra disk
yocto_disk = 'yocto_disk.vdi'
yocto_disk_size_gb = 200

# Username when cloning repos from qt-project.org
qt_project_user = "#{ENV['QT_PROJECT_USER']}"

# SSH key to use when cloning with git in guest
vagrant_private_key_file="ssh_private_key_id_rsa"

# System resources
ram = 16 #GB
cpus = 6

#Manifest settings
manifest_repo = "git@git.pelagicore.net:pelux/yocto-manifests.git"
manifest_repo_branch = "dev"
manifest_file = "qemu.xml"

#Image settings
images="core-image-bistro"

Vagrant.configure(2) do |config|
    # We don't use the rsynced files
    config.vm.synced_folder '.', '/vagrant', :disabled => true

    config.vm.box = "debian/jessie64"

    # Requires an AMI with a user named "vagrant"
    config.vm.provider :aws do |aws, override|
        aws.access_key_id = "#{ENV['AWS_ACCESS_KEY_ID']}"
        aws.secret_access_key = "#{ENV['AWS_SECRET_ACCESS_KEY']}"
        aws.keypair_name = "build1"

        aws.ami = "ami-fa38d995"
        aws.region = "eu-central-1"
        aws.instance_type = "c4.4xlarge"

        override.ssh.private_key_path = "build1.pem"
        override.vm.box = "dummy"

    end

    config.vm.provider "virtualbox" do |vb|
        vb.memory = ram * 1024
        vb.cpus = cpus

        vb.customize ['createhd',
                      '--filename', yocto_disk,
                      '--size', yocto_disk_size_gb * 1024]
        vb.customize ['storageattach', :id,
                      '--storagectl', 'SATA Controller',
                      '--port', 1,
                      '--device', 0,
                      '--type', 'hdd',
                      '--medium', yocto_disk]
    end

    # Set up extra disk space in /home/vagrant
    config.vm.provision "shell", inline: <<-SHELL
        # o  - clear the in memory partition table
        # n  - new partition
        # p  - primary partition
        # 1  - partition number 1
        #" " - default - start at beginning of disk
        #" " - default - full disk
        # w  - write the partition table
        (echo o; echo n; echo p; echo 1; echo " "; echo " "; echo w;) | fdisk /dev/sdb
        mkfs.ext4 /dev/sdb1

        # Back up the old .ssh directory, this contains the pubkey for the
        # vagrant tool, w/o this, we can't use "vagrant ssh"
        cp -a /home/vagrant/.ssh /tmp

        # Mount the new drive
        mount /dev/sdb1 /home/vagrant/

        # Restore the .ssh backup
        cp -a /tmp/.ssh /home/vagrant/

        # Re-initialize the home directory
        cp -r /etc/skel/.* /home/vagrant
        chown vagrant:vagrant /home/vagrant/
    SHELL

    config.vm.provision "file", source: vagrant_private_key_file, destination: "/home/vagrant/.ssh/id_rsa"

    # Install dependencies
    config.vm.provision "shell", inline: <<-SHELL

        sudo apt-get update
        sudo apt-get install -y git sed wget cvs subversion git-core \
            coreutils unzip gawk python-pysqlite2 diffstat help2man make gcc \
            build-essential g++ chrpath libxml2-utils libsdl1.2-dev texinfo

    SHELL

    # Configure qt-project if username provided
    config.vm.provision "shell", privileged: false, args: [qt_project_user], inline: <<-SHELL
        QT_PROJECT_USER=$1
        if [ "$QT_PROJECT_USER" != "" ] ; then
            ssh-keyscan -p 29418 codereview.qt-project.org | tee -a ~/.ssh/known_hosts

            touch ~/.ssh/config
            cat >> ~/.ssh/config <<-EOF
Host codereview.qt-project.org
    HostName codereview.qt-project.org
    Port 29418
    User $QT_PROJECT_USER
EOF
        fi 
    SHELL

    # Configure git
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        ssh-keyscan git.pelagicore.net | tee -a ~/.ssh/known_hosts
        git config --global user.email "vagrant@pelagicore.com"
        git config --global user.name "Vagrant"
    SHELL

    # Initialize Yocto environment
    config.vm.provision "shell", privileged: false, args: [manifest_repo, manifest_repo_branch, manifest_file], inline: <<-SHELL
        MANIFEST_REPO=$1
        MENIFEST_REPO_BRANCH=$2
        MANIFEST=$3

        export CONFDIR=~/yocto/build/conf

        # Set up environment with repo
        mkdir ~/bin
        curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        export PATH=$PATH:~/bin/

        # Clone recipes
        mkdir yocto
        cd yocto
        repo init -u "$MANIFEST_REPO" -m "$MANIFEST" -b dev
        repo sync

    SHELL

    # Build using BitBake
    config.vm.provision "shell", privileged: false, args: [images], inline: <<-SHELL
        IMAGES=$1

        # Set up bitbake environment
        cd yocto/sources/poky/
        source oe-init-build-env ../../build

        echo "Trying 100 times for fetch all sources.."
        COUNTER=0
        while [  $COUNTER -lt 100 ]; do
            echo COUNTER $COUNTER
            let COUNTER+=1
            sleep 1
            bitbake -c fetchall $IMAGES
            if [ $? -eq 0 ]; then
                break
            fi
        done

        # A positive exit code from now on is fatal
        set -e

        # Start build
        bitbake $IMAGES
        bitbake -c populate_sdk $IMAGES
    SHELL

    # Create a release
    config.vm.provision "shell", privileged: false, args: [manifest_repo, manifest_repo_branch, manifest_file], inline: <<-SHELL
        export PATH=$PATH:~/repo/
        MANIFEST_REPO=$1
        MANIFEST_REPO_BRANCH=$2
        MANIFEST=$3
        git clone $MANIFEST_REPO -b $MANIFEST_REPO_BRANCH yocto-manifests
        cd yocto-manifests/release_tools/
        ./make_release.sh ~/yocto/build/ ~/releases/ `git -C ~/yocto-manifests rev-parse --short HEAD` ~/yocto-manifests/README.md
    SHELL
end
